{"version":3,"sources":["components/header.js","components/search.js","components/recipeModal.js","components/foodcard.js","components/recipeList.js","components/banner.js","components/body.js","components/footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","Container","className","Row","Col","href","target","Search","setKeyword","request","isLoading","setLoading","useState","value","setValue","useEffect","InputGroup","FormControl","placeholder","aria-label","aria-describedby","onChange","e","Append","Button","variant","onClick","RecipeModal","open","setOpen","data","label","calories","image","totalTime","dietLabels","healthLabels","ingredients","url","handleClose","body","map","p","yield","Math","round","src","ing","Card","Img","height","Body","text","Modal","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","FoodCard","recipe","openModal","setOpenModal","sm","length","RecipeList","dataArray","key","setKey","obj","param","Banner","n","Date","getHours","greeting","meal","alt","keyword","setData","toast","setToast","a","fetch","response","json","jsonObj","hits","fluid","CircularProgress","color","Toast","show","delay","autohide","Footer","id","data-color","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4ca6f964.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Col, Row, Container } from \"react-bootstrap\";\r\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <Container className=\"header\">\r\n      <Row className=\"header-row\">\r\n        <Col className=\"logo pl-0\">Plato</Col>\r\n        <a\r\n          href=\"https://github.com/SaurabhS78/react-recipe-app\"\r\n          target=\"_blank\"\r\n        >\r\n          <GitHubIcon className=\"logo\" />\r\n        </a>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Row, Col, InputGroup, FormControl } from \"react-bootstrap\";\r\n\r\nconst Search = ({ setKeyword, request, isLoading, setLoading }) => {\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setKeyword(value);\r\n  }, [value]);\r\n\r\n  const handleClick = () => {\r\n    request();\r\n    setLoading(true);\r\n  };\r\n  return (\r\n    <Row>\r\n      <Col className=\"search\">\r\n        <InputGroup>\r\n          <FormControl\r\n            placeholder=\"Let's cook something appetizing\"\r\n            aria-label=\"search\"\r\n            aria-describedby=\"basic-addon1\"\r\n            value={value}\r\n            onChange={(e) => setValue(e.target.value)}\r\n          />\r\n          <InputGroup.Append>\r\n            <Button variant=\"primary\" onClick={handleClick}>\r\n              {isLoading ? \"Searching...\" : \"Get Recipes\"}\r\n            </Button>\r\n          </InputGroup.Append>\r\n        </InputGroup>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport { Row, Container, Col, Card } from \"react-bootstrap\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport AccessTimeIcon from \"@material-ui/icons/AccessTime\";\r\nimport PersonIcon from \"@material-ui/icons/Person\";\r\nimport WhatshotIcon from \"@material-ui/icons/Whatshot\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\n\r\nconst RecipeModal = ({ open, setOpen, data }) => {\r\n  const {\r\n    label,\r\n    calories,\r\n    image,\r\n    totalTime,\r\n    dietLabels,\r\n    healthLabels,\r\n    ingredients,\r\n    url,\r\n  } = data;\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const body = (\r\n    <Container className=\"recipe-modal\">\r\n      <Row>\r\n        <Col className=\"px-0 label\">{label}</Col>\r\n        <div>\r\n          <CloseIcon className=\"svg pointer\" onClick={handleClose} />\r\n        </div>\r\n      </Row>\r\n      <Row className=\"mt-4 row-to-column\">\r\n        <Col className=\"m-auto\">\r\n          <Row>\r\n            {dietLabels.map((p) => (\r\n              <span className=\"time position-static mr-2 bgs-blue\">{p}</span>\r\n            ))}\r\n          </Row>\r\n          <Row>\r\n            {healthLabels.map((p) => (\r\n              <span className=\"time position-static mr-2 mt-2\">{p}</span>\r\n            ))}\r\n          </Row>\r\n          <Row className=\"mt-3\">\r\n            <span className=\"serving mr-2\">\r\n              <PersonIcon className=\"svg ml-2\" /> {data.yield} Foodies\r\n            </span>\r\n            <span className=\"serving mr-2\">\r\n              <WhatshotIcon className=\"svg ml-2\" />\r\n              {Math.round(calories)} Cal\r\n            </span>\r\n            {totalTime ? (\r\n              <span className=\"serving\">\r\n                <AccessTimeIcon className=\"svg ml-2\" />\r\n                {totalTime} mins\r\n              </span>\r\n            ) : null}\r\n          </Row>\r\n        </Col>\r\n        <Col className=\"p-0\">\r\n          <img className=\"img-modal\" src={image} />\r\n        </Col>\r\n      </Row>\r\n      <Row className=\"ing mt-4 mb-2\">Ingredients</Row>\r\n      <Row className=\"ing-container\">\r\n        {ingredients.map((ing) => (\r\n          <Col>\r\n            <Card className=\"ing-card\">\r\n              <Card.Img\r\n                variant=\"top\"\r\n                src={ing.image}\r\n                height=\"150px\"\r\n                className=\"img-fit\"\r\n              />\r\n              <Card.Body className=\"ing-body\">{ing.text}</Card.Body>\r\n            </Card>\r\n          </Col>\r\n        ))}\r\n      </Row>\r\n      <Row className=\"mt-4\">\r\n        <a href={url} className=\"link\" target=\"_blank\">\r\n          See Complete Recipe here\r\n        </a>\r\n      </Row>\r\n    </Container>\r\n  );\r\n\r\n  return (\r\n    <Modal\r\n      open={open}\r\n      onClose={handleClose}\r\n      closeAfterTransition\r\n      BackdropComponent={Backdrop}\r\n      BackdropProps={{\r\n        timeout: 500,\r\n      }}\r\n    >\r\n      <Fade in={open}>{body}</Fade>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default RecipeModal;\r\n","import React, { useState } from \"react\";\r\nimport { Col, Row, Card } from \"react-bootstrap\";\r\nimport RecipeModal from \"./recipeModal\";\r\n\r\nconst FoodCard = ({ recipe }) => {\r\n  const { label, calories, image, totalTime, dietLabels } = recipe;\r\n  const [openModal, setOpenModal] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Card className=\"foodcard\" onClick={() => setOpenModal(true)}>\r\n        {totalTime !== 0 ? (\r\n          <span className=\"time\">{totalTime} mins</span>\r\n        ) : null}\r\n        <Card.Img variant=\"top\" src={image} />\r\n        <Card.Body>\r\n          <Row className=\"px-2\">\r\n            <Col sm={9} className=\"px-0 title\">\r\n              {label}\r\n            </Col>\r\n            <Col sm={3} className=\"px-0 cal ta-end\">\r\n              {Math.round(calories)} Cal\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"serving px-2 mt-2\">\r\n            Servings: {recipe.yield} Foodies\r\n          </Row>\r\n          {dietLabels.length > 0 ? (\r\n            <Row className=\"cal px-2 mt-1\">\r\n              Diet Labels: {dietLabels.map((label) => label + \", \")}\r\n            </Row>\r\n          ) : null}\r\n        </Card.Body>\r\n      </Card>\r\n      <RecipeModal open={openModal} setOpen={setOpenModal} data={recipe} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FoodCard;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport FoodCard from \"./foodcard\";\r\n\r\nconst RecipeList = ({ dataArray }) => {\r\n  var [key, setKey] = useState(0);\r\n\r\n  const keyHandler = (param) => {\r\n    key = param + 1;\r\n    return key;\r\n  };\r\n\r\n  useEffect(() => {\r\n    setKey(key);\r\n  }, [key]);\r\n\r\n  return (\r\n    <Container className=\"list px-0 mt-5 mb-5\">\r\n      {dataArray.map((obj) => (\r\n        <FoodCard key={keyHandler(key)} recipe={obj.recipe} />\r\n      ))}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default RecipeList;\r\n","import React from \"react\";\r\nimport { Container, Row } from \"react-bootstrap\";\r\n\r\nconst Banner = () => {\r\n  var d = new Date();\r\n  var n = d.getHours();\r\n\r\n  const greeting = n < 12 ? \"Morning\" : n < 16 ? \"Afternoon\" : \"Evening\";\r\n  const meal =\r\n    n < 12 ? \"Breakfast\" : n < 16 ? \"Lunch\" : n < 20 ? \"Snack\" : \"Dinner\";\r\n\r\n  return (\r\n    <Container className=\"banner position-relative\">\r\n      <img\r\n        alt=\"banner image\"\r\n        src=\"https://images.squarespace-cdn.com/content/v1/5c5c3833840b161566b02a76/1573133725500-Y5PCN0V04I86HDAT8AT0/ke17ZwdGBToddI8pDm48kLkXF2pIyv_F2eUT9F60jBl7gQa3H78H3Y0txjaiv_0fDoOvxcdMmMKkDsyUqMSsMWxHk725yiiHCCLfrh8O1z4YTzHvnKhyp6Da-NYroOW3ZGjoBKy3azqku80C789l0iyqMbMesKd95J-X4EagrgU9L3Sa3U8cogeb0tjXbfawd0urKshkc5MgdBeJmALQKw/WBC_7095.jpg?format=2500w\"\r\n      />\r\n      <Container className=\"greeting pt-3 pb-3\">\r\n        <h3>Good {greeting}</h3>\r\n        <h4>Something smells delicious. Time for a yummy {meal}!</h4>\r\n      </Container>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Banner;\r\n","import React, { useState } from \"react\";\r\nimport { Container, Toast } from \"react-bootstrap\";\r\nimport Search from \"./search\";\r\nimport RecipeList from \"./recipeList\";\r\nimport Banner from \"./banner\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport ErrorOutlineIcon from \"@material-ui/icons/ErrorOutline\";\r\n\r\nconst APP_ID = \"bb0f4f21\";\r\nconst APP_KEY = \"49a492348964d4dec0392ee5b89a582f\";\r\n\r\nconst Body = () => {\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [keyword, setKeyword] = useState(\"\");\r\n  const [data, setData] = useState([]);\r\n  const [toast, setToast] = useState(false);\r\n\r\n  const url = `https://api.edamam.com/search?q=${keyword}&app_id=${APP_ID}&app_key=${APP_KEY}&from=0&to=20`;\r\n  async function request() {\r\n    try {\r\n      const response = await fetch(url);\r\n      const jsonObj = await response.json();\r\n      setData(jsonObj.hits);\r\n      setLoading(false);\r\n    } catch {\r\n      setLoading(false);\r\n      setToast(true);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Search\r\n        isLoading={isLoading}\r\n        setLoading={setLoading}\r\n        setKeyword={setKeyword}\r\n        request={request}\r\n      />\r\n\r\n      <Banner />\r\n      <RecipeList dataArray={data} />\r\n      <Backdrop className=\"loader\" open={isLoading}>\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n      <Toast\r\n        className=\"toast\"\r\n        show={toast}\r\n        onClose={() => setToast(false)}\r\n        delay={3000}\r\n        autohide\r\n      >\r\n        <Toast.Header>\r\n          <ErrorOutlineIcon />\r\n          <strong className=\"mr-auto\">Server On Heavy Load</strong>\r\n        </Toast.Header>\r\n        <Toast.Body>\r\n          The server is running on heavy load. Please Try again after 1 min\r\n        </Toast.Body>\r\n      </Toast>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Body;\r\n","import React from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <Container fluid className=\"px-0 footer\">\r\n      <div className=\"text mb-2\">\r\n        Made With &#10084; by Saurabh Sangam (aka Zedd)\r\n      </div>\r\n      <div id=\"edamam-badge\" data-color=\"badge\"></div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/header\";\nimport Body from \"./components/body\";\nimport Footer from \"./components/footer\";\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <Body />\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./main.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}